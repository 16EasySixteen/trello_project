name: docker multi-stage build

on:
  push:
    branches:
      - '**' # 해당 branch에 push 되었을 경우

  # https://github.com/marketplace/actions/build-and-push-docker-images

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
  # Ec2 에 배포
  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    # https://github.com/marketplace/actions/ssh-remote-commands
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -d -p 8080:8080 \
                -e DB_USERNAME=${{secrets.DB_USERNAME}} \
                -e MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}} \
                -e MYSQL_URL=${{secrets.MYSQL_URL}} \
                -e S3_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}} \
                -e S3_SECRET_KEY=${{secrets.S3_SECRET_KEY}} \
                -e S3_REGION=${{secrets.S3_REGION}} \
                -e S3_BUCKET_NAME=${{secrets.S3_BUCKET_NAME}} \
                -e SLACK_BOT_TOKEN=${{secrets.SLACK_BOT_TOKEN}} \
                -e SLACK_CHANNEL=${{secrets.SLACK_CHANNEL}} \
                -e JWT_SECRET=${{secrets.JWT_SECRET}} \
              ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_TAG_NAME }}:latest
            
            # 디버깅: 컨테이너가 제대로 실행되고 환경 변수가 반영되었는지 확인
            sudo docker logs <container_id>